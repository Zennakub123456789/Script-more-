local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()
WindUI:SetNotificationLower(true)

local Window = WindUI:CreateWindow({
    Title = "Global TAS | 0.0.2",
    Icon = "video",
    Author = "By Tad Hub",
    Folder = "TadHub_TAS",
    Size = UDim2.fromOffset(550, 350),
    Transparent = true,
    Theme = "Dark",
    Resizable = true,
    SideBarWidth = 200,
    Background = "",
    BackgroundImageTransparency = 0.42,
    HideSearchBar = true,
    ScrollBarEnabled = false,
    User = { Enabled = true, Anonymous = false }
})

Window:EditOpenButton({
    Title = "Open TAS UI",
    Icon = "monitor",
    CornerRadius = UDim.new(0,16),
    StrokeThickness = 2,
    Color = ColorSequence.new(Color3.fromHex("FF0F7B"), Color3.fromHex("F89B29")),
    OnlyMobile = false,
    Enabled = true,
    Draggable = true,
})

Window:IsResizable(true)
Window:SetToggleKey(Enum.KeyCode.H)

local MainTab = Window:Tab({ Title = "Main", Icon = "video" })
local SaveTab = Window:Tab({ Title = "Save/Load", Icon = "folder" })

local Running = false
local Frames = {}
local TimeStart = tick()
local TASLoop
local LastPlayedFrames = nil

local Player = game:GetService("Players").LocalPlayer
local function getChar()
    local Character = Player.Character
    if Character then return Character end
    Player.CharacterAdded:Wait()
    return getChar()
end

local function StartRecord()
    Frames = {}
    LastPlayedFrames = nil
    Running = true
    TimeStart = tick()

    WindUI:Notify({ Title = "⏺️ Start Recording", Content = "Start recording...", Icon = "circle-dot", Duration = 3 })

    task.spawn(function()
        while Running do
            game:GetService("RunService").Heartbeat:Wait()
            local Character = getChar()
            table.insert(Frames, {
                Character.HumanoidRootPart.CFrame,
                Character.Humanoid:GetState().Value,
                tick() - TimeStart
            })
        end
    end)
end

local function StopRecord()
    Running = false
    WindUI:Notify({ Title = "⏹️ Stop Recording", Content = "Stop Recording (Frames: " .. tostring(#Frames) .. ")", Icon = "stop-circle", Duration = 3 })
end

local function PlayTAS()
    if #Frames == 0 then
        WindUI:Notify({ Title = "⚠️ No Data", Content = "No record yet", Icon = "alert-triangle", Duration = 3 })
        return
    end

    local Character = getChar()
    local TimePlay = tick()
    local FrameCount = #Frames
    local OldFrame = 1

    WindUI:Notify({ Title = "▶️ Play TAS", Content = "Frames: " .. FrameCount, Icon = "play", Duration = 3 })

    TASLoop = game:GetService("RunService").Heartbeat:Connect(function()
        local NewFrames = math.min(OldFrame + 60, FrameCount)
        local CurrentTime = tick()

        if (CurrentTime - TimePlay) >= Frames[FrameCount][3] then
            if TASLoop then TASLoop:Disconnect() TASLoop = nil end
            LastPlayedFrames = table.clone(Frames)
            WindUI:Notify({ Title = "✅ finish", Content = "Finished playing", Icon = "check-circle", Duration = 3 })
        end

        for i = OldFrame, NewFrames do
            local Frame = Frames[i]
            if Frame and Frame[3] <= CurrentTime - TimePlay then
                OldFrame = i
                Character.HumanoidRootPart.CFrame = Frame[1]
                Character.Humanoid:ChangeState(Frame[2])
            end
        end
    end)
end

local function StopPlay()
    if TASLoop then
        TASLoop:Disconnect()
        TASLoop = nil
        WindUI:Notify({ Title = "⏹️ Stop Play", Content = "Stop playing.", Icon = "square", Duration = 3 })
    else
        WindUI:Notify({ Title = "⚠️ Not playing", Content = "not playing TAS.", Icon = "alert-triangle", Duration = 3 })
    end
end

local ControlSection = MainTab:Section({
    Title = "🎮 Controls",
    TextXAlignment = "Left",
    TextSize = 18,
})

ControlSection:Button({
    Title = "⏺️ Start Recording",
    Desc = "Start Recording",
    Callback = StartRecord
})

ControlSection:Button({
    Title = "🛑 Stop Recording",
    Desc = "Stop Recording",
    Callback = StopRecord
})

-- Play Buttons
ControlSection:Button({
    Title = "▶️ Play TAS",
    Desc = "Play the TAS",
    Callback = PlayTAS
})

ControlSection:Button({
    Title = "⏹️ Stop Play",
    Desc = "Stop playing TAS",
    Callback = StopPlay
})

local KeybindSection = MainTab:Section({
    Title = "⌨️ Keybinds",
    TextXAlignment = "Left",
    TextSize = 18,
})

KeybindSection:Keybind({
    Title = "Start Recording Bind",
    Key = Enum.KeyCode.F5,
    Flag = "Start_Record_Bind",
    Callback = StartRecord
})

KeybindSection:Keybind({
    Title = "Stop Recording Bind",
    Key = Enum.KeyCode.F6,
    Flag = "Stop_Record_Bind",
    Callback = StopRecord
})

KeybindSection:Keybind({
    Title = "Play Bind",
    Key = Enum.KeyCode.F7,
    Flag = "Play_TAS_Bind",
    Callback = PlayTAS
})

KeybindSection:Keybind({
    Title = "Stop Play Bind",
    Key = Enum.KeyCode.F8,
    Flag = "Stop_Play_Bind",
    Callback = StopPlay
})

local SaveSection = SaveTab:Section({ Title = "💾 TAS Management", TextXAlignment = "Left", TextSize = 17 })
local HttpService = game:GetService("HttpService")
local TASFolder = "TAS_Saves"

if not isfolder(TASFolder) then makefolder(TASFolder) end

local TASNames = {}
local SavedTAS = {}

for _, file in ipairs(listfiles(TASFolder)) do
    local name = file:match(TASFolder .. "/(.+)%.json")
    if name then
        table.insert(TASNames, name)
        local success, data = pcall(function() return HttpService:JSONDecode(readfile(file)) end)
        if success then SavedTAS[name] = data end
    end
end

local selectedLoadTAS = nil
local selectedDeleteTAS = nil
local TASNameInputText = ""

local NameInput = SaveSection:Input({ Title = "Name TAS", Callback = function(text) TASNameInputText = text end })

local SaveDropdown = SaveSection:Dropdown({ Title = "💾 Save", Values = TASNames, Multi = false, Default = "", Callback = function(value) end })

local LoadDropdown = SaveSection:Dropdown({ Title = "📂 Load", Values = TASNames, Multi = false, Default = "", Callback = function(value) selectedLoadTAS = value end })

local DeleteDropdown = SaveSection:Dropdown({ Title = "🗑️ Delete TAS", Values = TASNames, Multi = false, Default = "", Callback = function(value) selectedDeleteTAS = value end })

SaveSection:Button({
    Title = "💾 Save Current TAS",
    Callback = function()
        local name = TASNameInputText
        if name == "" then return WindUI:Notify({Title="⚠️ Enter TAS name", Content="กรุณากรอกชื่อก่อนบันทึก", Icon="alert-triangle", Duration=3}) end
        if not Frames or #Frames==0 then return WindUI:Notify({Title="⚠️ No information", Content="Please Record before saving.", Icon="alert-triangle", Duration=3}) end

        SavedTAS[name] = table.clone(Frames)
        writefile(TASFolder .. "/" .. name .. ".json", HttpService:JSONEncode(Frames))

        if not table.find(TASNames, name) then table.insert(TASNames, name) end
        SaveDropdown:Refresh(TASNames)
        LoadDropdown:Refresh(TASNames)
        DeleteDropdown:Refresh(TASNames)

        WindUI:Notify({Title="💾 Save", Content="Save TAS: "..name, Icon="save", Duration=3})
    end
})

SaveSection:Button({
    Title = "📂 Load Selected TAS",
    Callback = function()
        local selected = selectedLoadTAS
        if selected and SavedTAS[selected] then
            Frames = table.clone(SavedTAS[selected])
            WindUI:Notify({Title="📥 Load", Content="Loaded TAS: "..selected.." Succeed", Icon="download", Duration=3})
        else
            WindUI:Notify({Title="⚠️ Not found TAS.", Content="Please select TAS before loading.", Icon="alert-triangle", Duration=3})
        end
    end
})

SaveSection:Button({
    Title = "🗑️ Delete Selected TAS",
    Callback = function()
        local selected = selectedDeleteTAS
        if selected and SavedTAS[selected] then
            SavedTAS[selected] = nil
            local filePath = TASFolder .. "/" .. selected .. ".json"
            if isfile(filePath) then delfile(filePath) end

            for i,v in ipairs(TASNames) do
                if v == selected then table.remove(TASNames,i) break end
            end

            SaveDropdown:Refresh(TASNames)
            LoadDropdown:Refresh(TASNames)
            DeleteDropdown:Refresh(TASNames)
            selectedDeleteTAS = nil

            WindUI:Notify({Title="🗑️ Delete", Content="Delete "..selected.." Succeed", Icon="trash", Duration=3})
        else
            WindUI:Notify({Title="⚠️ No TAS selected", Content="Please select TAS before deleting.", Icon="alert-triangle", Duration=3})
        end
    end
})
