local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local HRP = LocalPlayer.Character:WaitForChild("HumanoidRootPart")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TextChatService = game:GetService("TextChatService")


local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()

WindUI:SetNotificationLower(true)

local Window = WindUI:CreateWindow({
    Title = "Tad Hub | Universe | 0.0.2",
    Icon = "door-open",
    Author = "By Tad Hub",
    Folder = "TadHub",
    Size = UDim2.fromOffset(550, 350),
    Transparent = true,
    Theme = "Dark",
    Resizable = true,
    SideBarWidth = 200,
    Background = "", -- rbxassetid only
    BackgroundImageTransparency = 0.42,
    HideSearchBar = true,
    ScrollBarEnabled = false,
    User = {
        Enabled = true,
        Anonymous = true,
        Callback = function()
            print("clicked")
        end,
    },
})

Window:EditOpenButton({
    Title = "Open Example UI",
    Icon = "monitor",
    CornerRadius = UDim.new(0,16),
    StrokeThickness = 2,
    Color = ColorSequence.new( -- gradient
        Color3.fromHex("FF0F7B"), 
        Color3.fromHex("F89B29")
    ),
    OnlyMobile = false,
    Enabled = true,
    Draggable = true,
})

Window:IsResizable(true)

Window:SetToggleKey(Enum.KeyCode.H)

local Tab = Window:Tab({
    Title = "Main",
    Icon = "bird",
    Locked = false,
})
local Section = Tab:Section({ 
    Title = "Status:",
    TextXAlignment = "Left",
    TextSize = 17, -- Default Size
})

local placeId = game.PlaceId
local filePath = "Waypoints/" .. tostring(placeId) .. "/data.json"
local mapName = game:GetService("MarketplaceService"):GetProductInfo(placeId).Name

local Button

Button = Tab:Paragraph({
    Title = mapName,
    Desc = "Loading...",
})

local HttpService = game:GetService("HttpService")

local countdownTime = 24 * 60 * 60 

local function readLastKeyTime()
    local success, content = pcall(function()
        return readfile("LastKeys.json")
    end)
    if success then
        local data = HttpService:JSONDecode(content)
        return data.time or os.time()
    end
    return os.time()
end

local lastKeyTime = readLastKeyTime()


local Keytime = Tab:Paragraph({
    Title = "Key expiration time",
    Desc = "Loading...",
})

task.spawn(function()
    while task.wait(1) do
        local remaining = (lastKeyTime + countdownTime) - os.time()

        if remaining <= 0 then
            Button:SetDesc("Key expired Go To Get Key")

            repeat
                task.wait(2)
                local newTime = readLastKeyTime()
                if newTime ~= lastKeyTime then
                    lastKeyTime = newTime
                    break
                end
            until false
        else
            local hours = math.floor(remaining / 3600)
            local minutes = math.floor((remaining % 3600) / 60)
            local seconds = remaining % 60
            Keytime:SetDesc(string.format("Time left %02d:%02d:%02d", hours, minutes, seconds))
        end
    end
end)

if isfile(filePath) then
    Button:SetDesc("This Game Have Waypoints file")
else
    Button:SetDesc("This map does not have Waypoints file yet.")
end

local Section = Tab:Section({ 
    Title = "Setup Waypoints",
    TextXAlignment = "Left",
    TextSize = 17, -- Default Size
})

local Waypoints = {}
local SelectedWaypointTeleport = nil
local SelectedWaypointDelete = nil
local WaypointName = ""

local DropdownTeleport = nil
local DropdownDelete = nil

local SelectedWaypointDelete = nil

local JobIdInput = ""

local function UpdateDropdowns()
    local names = {}
    for _, wp in pairs(Waypoints) do
        if typeof(wp) == "table" and typeof(wp.Name) == "string" then
            table.insert(names, wp.Name)
        end
    end
    if DropdownTeleport then
        DropdownTeleport:Refresh(names)
    end
    if DropdownDelete then
        DropdownDelete:Refresh(names)
    end
end

Tab:Input({
    Title = "📝 Waypoints Name",
    Desc = "Set Name Your want ",
    Placeholder = "input here",
    Callback = function(text)
        WaypointName = text
    end
})

Tab:Button({
    Title = "➕ Set Waypoint",
    Desc = "Save your location",
    Callback = function()
        if WaypointName == "" then
            WindUI:Notify({
                Title = "Not yet named",
                Content = "Please enter your name before saving.",
                Icon = "type",
                Duration = 4,
            })
            return
        end

        table.insert(Waypoints, {Name = WaypointName, Pos = LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position})
        WaypointName = ""
        UpdateDropdowns()

        WindUI:Notify({
            Title = "Save successful",
            Content = "New waypoints added",
            Icon = "check-circle",
            Duration = 3,
        })
    end
})

Tab:Button({
    Title = "💾 Save Waypoints to a file",
    Desc = "Click to save all to a JSON file and if you have deleted Waypoints, click to save again. (Must do)",
    Callback = function()
        if #Waypoints == 0 then
            WindUI:Notify({
                Title = "⚠️ No Information",
                Content = "There are no waypoints to save.",
                Icon = "alert-circle",
                Duration = 3,
            })
            return
        end

        if not isfolder("Waypoints") then
            makefolder("Waypoints")
        end

        local placeFolder = "Waypoints/" .. tostring(game.PlaceId)
        if not isfolder(placeFolder) then
            makefolder(placeFolder)
        end

        local filePath = placeFolder .. "/data.json"

        local data = {}
        for _, wp in pairs(Waypoints) do
            table.insert(data, {
                Name = wp.Name,
                Pos = {x = wp.Pos.X, y = wp.Pos.Y, z = wp.Pos.Z}
            })
        end

        local success, result = pcall(function()
            writefile(filePath, game:GetService("HttpService"):JSONEncode(data))
        end)

        if success then
            WindUI:Notify({
                Title = "✅ Save successful",
                Content = "Waypoints Save at:\n" .. filePath,
                Icon = "save",
                Duration = 4,
            })
        else
            WindUI:Notify({
                Title = "❌ Save failed",
                Content = "Error: " .. tostring(result),
                Icon = "x",
                Duration = 4,
            })
        end
    end
})

local Section = Tab:Section({ 
    Title = "Waypoints",
    TextXAlignment = "Left",
    TextSize = 17, -- Default Size
})

DropdownTeleport = Tab:Dropdown({
    Title = "🚀 Select the location to teleport",
    Values = {},
    Value = nil,
    Callback = function(option)
        SelectedWaypointTeleport = option
    end
})

Tab:Button({
    Title = "📦 Teleport to Waypoint",
    Desc = "Teleport to the selected Waypoints",
    Callback = function()
        local character = LocalPlayer.Character
        if not character then
            WindUI:Notify({
                Title = "error",
                Content = "No characters yet",
                Icon = "alert-triangle",
                Duration = 4,
            })
            return
        end

        local HRP = character:FindFirstChild("HumanoidRootPart")
        if not HRP then
            WindUI:Notify({
                Title = "error",
                Content = "HumanoidRootPart not found",
                Icon = "alert-triangle",
                Duration = 4,
            })
            return
        end

        for _, wp in pairs(Waypoints) do
            if wp.Name == SelectedWaypointTeleport then
                HRP.CFrame = CFrame.new(wp.Pos)
                WindUI:Notify({
                    Title = "Teleport successful",
                    Content = "You have been Teleport to: " .. wp.Name,
                    Icon = "map-pin",
                    Duration = 4,
                })
                return
            end
        end

        WindUI:Notify({
            Title = "Waypoints not yet selected",
            Content = "Please select a waypoint before teleport.",
            Icon = "target",
            Duration = 4,
        })
    end
})

local Section = Tab:Section({ 
    Title = "Remove Waypoints",
    TextXAlignment = "Left",
    TextSize = 17, -- Default Size
})

DropdownDelete = Tab:Dropdown({
    Title = "🗑️ Select the waypoints to delete.",
    Values = {},
    Value = nil,
    Callback = function(option)
        SelectedWaypointDelete = option
    end
})

Tab:Button({
    Title = "❌ Delete the selected waypoints",
    Desc = "Delete the selected Waypoints from the delete list. Please go back and save it.",
    Callback = function()
        for i, wp in pairs(Waypoints) do
            if wp.Name == SelectedWaypointDelete then
                table.remove(Waypoints, i)
                SelectedWaypointDelete = nil
                SelectedWaypointTeleport = nil
                UpdateDropdowns()

                WindUI:Notify({
                    Title = "Delete successfully",
                    Content = "Waypoints has been successfully deleted.",
                    Icon = "trash",
                    Duration = 3,
                })
                return
            end
        end

        WindUI:Notify({
            Title = "Waypoints not yet selected",
            Content = "Please select the waypoints to delete.",
            Icon = "target",
            Duration = 4,
        })
    end
})

do
    local placeFolder = "Waypoints/" .. tostring(game.PlaceId)
    local filePath = placeFolder .. "/data.json"

    if isfile(filePath) then
        local content = readfile(filePath)
        local success, data = pcall(function()
            return game:GetService("HttpService"):JSONDecode(content)
        end)

        if success and typeof(data) == "table" then
            table.clear(Waypoints)

            for _, wp in pairs(data) do
                if wp.Name and wp.Pos then
                    table.insert(Waypoints, {
                        Name = wp.Name,
                        Pos = Vector3.new(wp.Pos.x, wp.Pos.y, wp.Pos.z)
                    })
                end
            end

            UpdateDropdowns()

            WindUI:Notify({
                Title = "📥 Waypoints loaded successfully",
                Content = ": " .. tostring(#Waypoints),
                Icon = "download",
                Duration = 3
            })
        else
            WindUI:Notify({
                Title = "❌ Load failed",
                Content = "Failed to read JSON",
                Icon = "x",
                Duration = 4
            })
        end
    else
        WindUI:Notify({
            Title = "Please save Waypoints",
            Content = "No Waypoints has been saved on this map yet.",
            Icon = "folder",
            Duration = 3
        })
    end
end

local Section = Tab:Section({ 
    Title = "Walk Speed",
    TextXAlignment = "Left",
    TextSize = 17, -- Default Size
})

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local WalkSpeedEnabled = false
local WalkSpeedValue = 16
local DefaultWalkSpeed = 16

-- เก็บค่า WalkSpeed ดั้งเดิมตอนโหลดตัวละคร
LocalPlayer.CharacterAdded:Connect(function(char)
    local humanoid = char:WaitForChild("Humanoid")
    DefaultWalkSpeed = humanoid.WalkSpeed
    if WalkSpeedEnabled then
        humanoid.WalkSpeed = WalkSpeedValue
    end
end)

Tab:Input({
    Title = "Enter WalkSpeed",
    Placeholder = "ใส่ค่าความเร็ว เช่น 30",
    Callback = function(text)
        local num = tonumber(text)
        if num and num > 0 then
            WalkSpeedValue = num

            -- ถ้าเปิดอยู่ ให้เปลี่ยน WalkSpeed ทันที
            if WalkSpeedEnabled then
                local character = LocalPlayer.Character
                if character then
                    local humanoid = character:FindFirstChildOfClass("Humanoid")
                    if humanoid then
                        humanoid.WalkSpeed = WalkSpeedValue
                    end
                end
            end
        end
    end
})

Tab:Toggle({
    Title = "Open/Close WalkSpeed",
    Desc = "Set WalkSpeed",
    Icon = "activity",
    Type = "Checkbox",
    Default = false,
    Callback = function(state)
        WalkSpeedEnabled = state
        local character = LocalPlayer.Character
        if character then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = WalkSpeedEnabled and WalkSpeedValue or DefaultWalkSpeed
            end
        end
    end
})

local Tab2 = Window:Tab({
    Title = "Server",
    Icon = "bird",
    Locked = false,
})
local Section = Tab2:Section({ 
    Title = "JobId",
    TextXAlignment = "Left",
    TextSize = 17, -- Default Size
})

Tab2:Button({
    Title = "📋 Copy JobId",
    Desc = "It will Copy JobId this Server to Clipboard",
    Callback = function()
        setclipboard(game.JobId)

        WindUI:Notify({
            Title = "📋 succeed!",
            Content = "JobId copied",
            Icon = "clipboard-copy",
            Duration = 3,
        })
    end
})

Tab2:Input({
    Title = "Put JobId",
    Placeholder = "Place JobId here...",
    Callback = function(text)
        JobIdInput = text
    end
})

Tab2:Button({
    Title = "🚀 teleport to JobId",
    Desc = "Teleport to the server.",
    Callback = function()
        if JobIdInput == "" then
            WindUI:Notify({
                Title = "❌ Failed",
                Content = "Please enter your JobId first.",
                Icon = "alert-circle",
                Duration = 3,
            })
            return
        end

        game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, JobIdInput, game:GetService("Players").LocalPlayer)
    end
})

local Section = Tab2:Section({ 
    Title = "Server",
    TextXAlignment = "Left",
    TextSize = 17, -- Default Size
})

local Buttonserver = Tab2:Button({
    Title = "Serverhop",
    Desc = "It will go to the others Servers",
    Locked = false,
    Callback = function()
        local success, module = pcall(function()
            return loadstring(game:HttpGet("https://raw.githubusercontent.com/Zennakub123456789/Script-more-/refs/heads/main/Serverhop.lua"))()
        end)

        if success and module and module.Teleport then
            module:Teleport(game.PlaceId)
        else
            warn("ไม่สามารถโหลด Module Serverhop ได้หรือไม่มีฟังก์ชัน Teleport")
        end
    end
})

local Buttonserver2 = Tab2:Button({
    Title = "Lower Players",
    Desc = "it Teleport to Lower Player in your Game is play",
    Callback = function()
        local Player = game.Players.LocalPlayer    
        local Http = game:GetService("HttpService")
        local TPS = game:GetService("TeleportService")
        local Api = "https://games.roblox.com/v1/games/"

        local _place = game.PlaceId
        local _servers = Api.._place.."/servers/Public?sortOrder=Asc&limit=100"

        local function Warp()
            local success, Servers = pcall(function()
                local Raw = game:HttpGet(_servers)
                return Http:JSONDecode(Raw)
            end)

            if success and Servers.data and #Servers.data > 0 then
                table.sort(Servers.data, function(a,b) return a.playing < b.playing end)
                local SmallestServer = Servers.data[1]

                TPS:TeleportToPlaceInstance(_place, SmallestServer.id, Player)
            else
                warn("can't Teleport")
            end
        end

        Warp()

        task.delay(2, function()
            if Player and Player.Parent then
                Warp()
            end
        end)
    end
})

Tab2:Button({
    Title = "Rejoin",
    Desc = "It will Rejoin to your server",
    Callback = function()
        local TeleportService = game:GetService("TeleportService")
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer

        TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, player)
    end
})

local Tab3 = Window:Tab({
    Title = "Chat",
    Icon = "Chat",
    Locked = false,
})
local Section = Tab3:Section({ 
    Title = "Auto Chat With Players",
    TextXAlignment = "Left",
    TextSize = 17, -- Default Size
})

local targetPlayerName = ""
local chatEnabled = false -- เปิด/ปิด ตาม toggle ปกติ
local hotkeyControlEnabled = false -- เปิด/ปิดตามปุ่ม F
local hotkeyActive = false -- สถานะจริงที่ใช้ใน hotkey mode

local connectedPlayers = {}

local statusLabel

local function sendMessage(msg)
    if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
        local channels = TextChatService:FindFirstChild("TextChannels")
        if channels then
            local channel = channels:FindFirstChild("RBXGeneral")
            if channel then
                channel:SendAsync(msg)
            else
                warn("ไม่พบช่อง RBXGeneral ในระบบแชทใหม่")
            end
        else
            warn("ไม่พบ TextChannels ใน TextChatService")
        end
    else
        local chatEvent = ReplicatedStorage:FindFirstChild("DefaultChatSystemChatEvents")
        if chatEvent and chatEvent:FindFirstChild("SayMessageRequest") then
            chatEvent.SayMessageRequest:FireServer(msg, "All")
        else
            warn("ไม่พบ SayMessageRequest สำหรับระบบแชทเก่า")
        end
    end
end

local function onPlayerChatted(player, msg)
    local enabledNow = chatEnabled
    if hotkeyControlEnabled then
        enabledNow = hotkeyActive
    end

    if enabledNow and player.Name == targetPlayerName then
        sendMessage(msg)
    end
end

local function connectPlayer(player)
    if connectedPlayers[player.UserId] then return end
    connectedPlayers[player.UserId] = true
    player.Chatted:Connect(function(msg)
        onPlayerChatted(player, msg)
    end)
end

for _, player in pairs(Players:GetPlayers()) do
    connectPlayer(player)
end

Players.PlayerAdded:Connect(function(player)
    connectPlayer(player)
end)

local function createStatusLabel()
    if statusLabel then statusLabel:Destroy() end
    statusLabel = Instance.new("TextLabel")
    statusLabel.Name = "ChatFollowStatusLabel"
    statusLabel.AnchorPoint = Vector2.new(1, 0)
    statusLabel.Position = UDim2.new(1, -10, 0, 10)
    statusLabel.Size = UDim2.new(0, 150, 0, 30)
    statusLabel.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    statusLabel.BackgroundTransparency = 0.3
    statusLabel.TextColor3 = Color3.new(1,1,1)
    statusLabel.TextStrokeColor3 = Color3.new(0,0,0)
    statusLabel.TextStrokeTransparency = 0.7
    statusLabel.Font = Enum.Font.SourceSansBold
    statusLabel.TextSize = 18
    statusLabel.Parent = Players.LocalPlayer:WaitForChild("PlayerGui")
    statusLabel.Text = "สถานะ: ปิด"
end

local function updateStatusLabel()
    if not statusLabel then return end
    local statusText = hotkeyActive and "สถานะ: เปิด" or "สถานะ: ปิด"
    statusLabel.Text = statusText
end

createStatusLabel()

Tab3:Input({
    Title = "Target Player Name",
    Placeholder = "ใส่ชื่อผู้เล่นที่ต้องการ",
    Callback = function(text)
        targetPlayerName = text
    end,
})

Tab3:Toggle({
    Title = "Enable Chat Follow (Toggle)",
    Default = false,
    Callback = function(state)
        chatEnabled = state
        -- ถ้าเปิด toggle ปกติ ให้ปิด hotkey mode อัตโนมัติ เพื่อไม่ให้ซ้อนกัน
        if state and hotkeyControlEnabled then
            hotkeyControlEnabled = false
            hotkeyActive = false
            updateStatusLabel()
        end
    end,
})

Tab3:Toggle({
    Title = "Enable Chat Follow (Hotkey F)",
    Default = false,
    Callback = function(state)
        hotkeyControlEnabled = state
        if state then
            hotkeyActive = false -- เริ่มปิดก่อน
            updateStatusLabel()
        else
            hotkeyActive = false
            updateStatusLabel()
        end
    end,
})

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if hotkeyControlEnabled and input.KeyCode == Enum.KeyCode.F then
        hotkeyActive = not hotkeyActive
        updateStatusLabel()
    end
end)

local Tab4 = Window:Tab({
    Title = "Test",
    Icon = "Main",
    Locked = false,
})
local Section = Tab4:Section({ 
    Title = "Anti-Afk",
    TextXAlignment = "Left",
    TextSize = 17,
})

local Button = Tab4:Button({
    Title = "Afk Gui",
    Desc = "Do you want AFK but are experiencing issues with being kicked when you are idle for more than 20 minutes? If so, click here.",
    Locked = false,
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/Zennakub123456789/Script-more-/refs/heads/main/Anti_AFK"))()
    end
})

local Section = Tab4:Section({ 
    Title = "Teleport UI",
    TextXAlignment = "Left",
    TextSize = 17,
})

local ToggleUI = Tab4:Toggle({
    Title = "Teleport Ui",
    Desc = "Add New Pets, Gear And Event Button",
    Icon = "layers",
    Type = "Checkbox",
    Default = false,
    Callback = function(state)
        local plr = game:GetService("Players").LocalPlayer
        local frame = plr.PlayerGui:WaitForChild("Teleport_UI"):WaitForChild("Frame")

        local function lockVisible(obj, val)
            obj.Visible = val
            obj:GetPropertyChangedSignal("Visible"):Connect(function()
                if state then
                    obj.Visible = val
                end
            end)
        end

        local petsOrig = frame:WaitForChild("Pets")
        local petsClone
        local gearOrig = frame:WaitForChild("Gear")
        local gearClone

        if state then
            petsClone = petsOrig:Clone()
            petsOrig:Destroy()
            petsClone.Parent = frame
            petsClone.Name = "Pets"
            lockVisible(petsClone, true)

            gearClone = gearOrig:Clone()
            gearOrig:Destroy()
            gearClone.Parent = frame
            gearClone.Name = "Gear"
            lockVisible(gearClone, true)

            local petsBtn = petsClone:IsA("ImageButton") and petsClone or petsClone:FindFirstChildOfClass("ImageButton")
            if petsBtn then
                petsBtn.MouseButton1Click:Connect(function()
                    local char = plr.Character or plr.CharacterAdded:Wait()
                    local hrp = char:WaitForChild("HumanoidRootPart")
                    hrp.CFrame = CFrame.new(-285.76, 3.00, -0.94)
                end)
            end

            local gearBtn = gearClone:IsA("ImageButton") and gearClone or gearClone:FindFirstChildOfClass("ImageButton")
            if gearBtn then
                gearBtn.MouseButton1Click:Connect(function()
                    local char = plr.Character or plr.CharacterAdded:Wait()
                    local hrp = char:WaitForChild("HumanoidRootPart")
                    hrp.CFrame = CFrame.new(-285.42, 3.00, -13.98)
                end)
            end

        else
            local pets = frame:FindFirstChild("Pets")
            local gear = frame:FindFirstChild("Gear")
            if pets then pets.Visible = false end
            if gear then gear.Visible = false end
        end

        local eventButton = frame:FindFirstChild("Event")
        if state then
            if not eventButton then
                local garden = frame:WaitForChild("Garden")
                garden.Name = "Garden1"
                local clone = garden:Clone()
                garden.Name = "Garden"
                clone.Name = "Event"
                clone.Parent = frame

                local txt = clone:FindFirstChild("Txt")
                if txt then txt.Text = "Event" end

                lockVisible(clone, true)

                local btn = clone:IsA("ImageButton") and clone or clone:FindFirstChildOfClass("ImageButton")
                if btn then
                    btn.MouseButton1Click:Connect(function()
                        local char = plr.Character or plr.CharacterAdded:Wait()
                        local hrp = char:WaitForChild("HumanoidRootPart")
                        hrp.CFrame = CFrame.new(-89.98, 4.77, -16.15)
                    end)
                end
            else
                lockVisible(eventButton, true)
            end
        else
            if eventButton then eventButton.Visible = false end
        end

        print("Pets & Gear & Event Visible: " .. tostring(state))
    end
})

local Tab5 = Window:Tab({
    Title = "Helper",
    Icon = "help",
    Locked = false,
})
local Section = Tab5:Section({ 
    Title = "Follow Part",
    TextXAlignment = "Left",
    TextSize = 17,
})

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local humroot = char:WaitForChild("HumanoidRootPart")

player.CharacterAdded:Connect(function(newChar)
    char = newChar
    humroot = newChar:WaitForChild("HumanoidRootPart")
end)

-- ตัวแปรระบบ
local guiCreated = false
local platform = nil
local enabled = false
local riseSpeed = 0.1 -- ความเร็วที่ยกขึ้น (stud ต่อวินาที)
local maxDiff = 5     -- ถ้า part ห่างจากใต้ตีนเกิน 5 stud จะรีเซ็ตกลับมา

-- ฟังก์ชันสร้าง GUI
local function createPlatformGUI()
    if guiCreated then return end
    guiCreated = true

    -- สร้าง GUI ปุ่ม TextButton
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "Part_Follow"
    ScreenGui.ResetOnSpawn = false
    ScreenGui.Parent = game:GetService("CoreGui")

    local ToggleButton = Instance.new("TextButton", ScreenGui)
    ToggleButton.Size = UDim2.new(0, 120, 0, 50)
    ToggleButton.Position = UDim2.new(0.5, -60, 0.9, 0)
    ToggleButton.Text = "🚀 Start Platform"
    ToggleButton.BackgroundColor3 = Color3.fromRGB(50, 150, 250)
    ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    ToggleButton.Font = Enum.Font.GothamBold
    ToggleButton.TextSize = 18
    ToggleButton.Active = true
    ToggleButton.Draggable = true

    local enabled = false

    -- ฟังก์ชันเปิด/ปิดแพลตฟอร์ม
    local function togglePlatform()
        enabled = not enabled
        if enabled then
            ToggleButton.Text = "⛔ Stop Platform"
            ToggleButton.BackgroundColor3 = Color3.fromRGB(200, 50, 50)

            platform = Instance.new("Part")
            platform.Name = "FollowPart"
            platform.Size = Vector3.new(6, 1, 6)
            platform.Anchored = true
            platform.Color = Color3.fromRGB(255, 255, 255)
            platform.Material = Enum.Material.Neon
            platform.Parent = workspace

            task.spawn(function()
                local height = 0
                while enabled and platform do
                    if humroot then
                        local pos = humroot.Position
                        height = height + riseSpeed
                        local targetPos = Vector3.new(pos.X, pos.Y - 4 + height, pos.Z)

                        local distance = (platform.Position - (pos - Vector3.new(0,3,0))).Magnitude
                        if distance > maxDiff then
                            height = 0
                            targetPos = pos - Vector3.new(0,4,0)
                        end

                        platform.CFrame = CFrame.new(targetPos)
                    end
                    task.wait(0.1)
                end
            end)
        else
            ToggleButton.Text = "🚀 Start Platform"
            ToggleButton.BackgroundColor3 = Color3.fromRGB(50, 150, 250)
            if platform then
                platform:Destroy()
                platform = nil
            end
        end
    end

    ToggleButton.MouseButton1Click:Connect(togglePlatform)
end

Tab5:Toggle({
    Title = "Open Platform GUI",
    Desc = "Open Part Follow",
    Type = "Checkbox",
    Default = false,
    Callback = function(state)
        if state then
            createPlatformGUI()
        else
            local existingGui = game:GetService("CoreGui"):FindFirstChild("Part_Follow")
            if existingGui then
                existingGui:Destroy()
            end
            guiCreated = false
        end
    end
})

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local humroot = char:WaitForChild("HumanoidRootPart")

player.CharacterAdded:Connect(function(newChar)
    char = newChar
    humroot = newChar:WaitForChild("HumanoidRootPart")
end)

local guiCreated = false
local platform = nil
local connection = nil

local function createPlatformGUI()
    if guiCreated then return end
    guiCreated = true

    pcall(function()
        if getgenv()["._Part_Follow(v2)"] and getgenv()["._Part_Follow(v2)"].Destroy then
            getgenv()["._Part_Follow(v2)"]:Destroy()
        end
    end)

    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "Part_Follow(v2)"
    ScreenGui.ResetOnSpawn = false

    ScreenGui.Parent = getSafeParent()
    protectGui(ScreenGui)
    getgenv()["._Part_Follow(v2)"] = ScreenGui

    ScreenGui.AncestryChanged:Connect(function(_, parent)
        if not parent then
            task.wait()
            ScreenGui.Parent = getSafeParent()
            protectGui(ScreenGui)
            getgenv()["._Part_Follow(v2)"] = ScreenGui
        end
    end)

    local ToggleButton = Instance.new("TextButton", ScreenGui)
    ToggleButton.Size = UDim2.new(0, 120, 0, 50)
    ToggleButton.Position = UDim2.new(0.5, -60, 0.9, 0)
    ToggleButton.Text = "Start Platform(v2)"
    ToggleButton.BackgroundColor3 = Color3.fromRGB(50, 150, 250)
    ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    ToggleButton.Font = Enum.Font.GothamBold
    ToggleButton.TextSize = 18
    ToggleButton.Active = true
    ToggleButton.Draggable = true

    local enabled = false

    local function togglePlatform()
        enabled = not enabled
        if enabled then
            ToggleButton.Text = "Stop Platform(v2)"
            ToggleButton.BackgroundColor3 = Color3.fromRGB(200, 50, 50)

            platform = Instance.new("Part")
            platform.Name = "FollowPart"
            platform.Size = Vector3.new(6, 1, 6)
            platform.Anchored = true
            platform.Color = Color3.fromRGB(255, 255, 255)
            platform.Material = Enum.Material.Neon
            platform.Parent = workspace

            connection = RunService.RenderStepped:Connect(function()
                if humroot and platform then
                    local pos = humroot.Position - Vector3.new(0,3,0)
                    platform.CFrame = CFrame.new(pos)
                end
            end)
        else
            ToggleButton.Text = "Start Platform(v2)"
            ToggleButton.BackgroundColor3 = Color3.fromRGB(50, 150, 250)
            if connection then
                connection:Disconnect()
                connection = nil
            end
            if platform then
                platform:Destroy()
                platform = nil
            end
        end
    end

    ToggleButton.MouseButton1Click:Connect(togglePlatform)
end

Tab5:Toggle({
    Title = "Open Platform GUI (v2)",
    Desc = "Open Part Follow (v2)",
    Type = "Checkbox",
    Default = false,
    Callback = function(state)
        if state then
            createPlatformGUI()
        else
            local existingGui = game:GetService("CoreGui"):FindFirstChild("Part_Follow(v2)")
            if existingGui then
                existingGui:Destroy()
            end
            guiCreated = false
        end
    end
})

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer

local noclipEnabled = false
local noclipConn

local function setNoclip(state)
    if noclipConn then
        noclipConn:Disconnect()
        noclipConn = nil
    end

    noclipEnabled = state

    if state then
        noclipConn = RunService.Stepped:Connect(function()
            local char = player.Character
            if not char then return end
            -- set all BaseParts to CanCollide = false
            for _, part in ipairs(char:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = false
                end
            end
        end)
    else
        local char = player.Character
        if char then
            for _, part in ipairs(char:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = true
                end
            end
        end
    end
end

-- keep noclip active after respawn if enabled
player.CharacterAdded:Connect(function(char)
    -- small delay ให้โมเดลโหลดพาร์ทก่อน
    task.wait(0.1)
    if noclipEnabled then
        setNoclip(true)
    end
end)

local Toggle = Tab5:Toggle({
    Title = "Noclip",
    Desc = "เปิด/ปิด Noclip",
    Icon = "bird",
    Type = "Checkbox",
    Default = false,
    Callback = function(state)
        setNoclip(state)
    end
})

local allowedMaps = {
    [109983668079237] = true,
}

if allowedMaps[game.PlaceId] then
    local TabSteal1 = Window:Tab({
        Title = "[🍓] Steal a Brainrot",
        Icon = "help",
        Locked = false,
    })

    local Section = TabSteal1:Section({ 
        Title = "Script",
        TextXAlignment = "Left",
        TextSize = 17,
    })

    local ButtonSteal1 = TabSteal1:Button({
        Title = "1",
        Desc = "Esp + invisible",
        Locked = false,
        Callback = function()
            loadstring(game:HttpGet("https://pastefy.app/NU4lqGZe/raw"))()
        end
    })
end

local allowedMaps = {
    [126884695634066] = true,
}

if allowedMaps[game.PlaceId] then
    local TabGarden1 = Window:Tab({
        Title = "[✨] Grow a Graden 🌶️",
        Icon = "help",
        Locked = false,
    })

    local Section = TabGarden1:Section({ 
        Title = "Script",
        TextXAlignment = "Left",
        TextSize = 17,
    })

    local ButtonGaeden1 = TabGarden1:Button({
        Title = "1",
        Desc = "Automatic and More",
        Locked = false,
        Callback = function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/AhmadV99/Speed-Hub-X/main/Speed%20Hub%20X.lua", true))()
        end
    })
end
