local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local HRP = LocalPlayer.Character:WaitForChild("HumanoidRootPart")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TextChatService = game:GetService("TextChatService")


local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()

WindUI:SetNotificationLower(true)

local Window = WindUI:CreateWindow({
    Title = "Tad Hub | Universe | 0.0.2",
    Icon = "door-open",
    Author = "By Tad Hub",
    Folder = "TadHub",
    Size = UDim2.fromOffset(550, 350),
    Transparent = true,
    Theme = "Dark",
    Resizable = true,
    SideBarWidth = 200,
    Background = "", -- rbxassetid only
    BackgroundImageTransparency = 0.42,
    HideSearchBar = true,
    ScrollBarEnabled = false,
    User = {
        Enabled = true,
        Anonymous = true,
        Callback = function()
            print("clicked")
        end,
    },
})

Window:EditOpenButton({
    Title = "Open Example UI",
    Icon = "monitor",
    CornerRadius = UDim.new(0,16),
    StrokeThickness = 2,
    Color = ColorSequence.new( -- gradient
        Color3.fromHex("FF0F7B"), 
        Color3.fromHex("F89B29")
    ),
    OnlyMobile = false,
    Enabled = true,
    Draggable = true,
})

Window:IsResizable(true)

Window:SetToggleKey(Enum.KeyCode.H)

local Tab = Window:Tab({
    Title = "Main",
    Icon = "bird",
    Locked = false,
})
local Section = Tab:Section({ 
    Title = "Status:",
    TextXAlignment = "Left",
    TextSize = 17, -- Default Size
})

local placeId = game.PlaceId
local filePath = "Waypoints/" .. tostring(placeId) .. "/data.json"
local mapName = game:GetService("MarketplaceService"):GetProductInfo(placeId).Name

local Button

Button = Tab:Paragraph({
    Title = mapName,
    Desc = "Loading...",
})

if isfile(filePath) then
    Button:SetDesc("This Game Have Waypoints file")
else
    Button:SetDesc("This map does not have Waypoints file yet.")
end

local Section = Tab:Section({ 
    Title = "Setup Waypoints",
    TextXAlignment = "Left",
    TextSize = 17, -- Default Size
})

local Waypoints = {}
local SelectedWaypointTeleport = nil
local SelectedWaypointDelete = nil
local WaypointName = ""

local DropdownTeleport = nil
local DropdownDelete = nil

local SelectedWaypointDelete = nil

local JobIdInput = ""

local function UpdateDropdowns()
    local names = {}
    for _, wp in pairs(Waypoints) do
        if typeof(wp) == "table" and typeof(wp.Name) == "string" then
            table.insert(names, wp.Name)
        end
    end
    if DropdownTeleport then
        DropdownTeleport:Refresh(names)
    end
    if DropdownDelete then
        DropdownDelete:Refresh(names)
    end
end

Tab:Input({
    Title = "üìù Waypoints Name",
    Desc = "Set Name Your want ",
    Placeholder = "input here",
    Callback = function(text)
        WaypointName = text
    end
})

Tab:Button({
    Title = "‚ûï Set Waypoint",
    Desc = "Save your location",
    Callback = function()
        if WaypointName == "" then
            WindUI:Notify({
                Title = "Not yet named",
                Content = "Please enter your name before saving.",
                Icon = "type",
                Duration = 4,
            })
            return
        end

        table.insert(Waypoints, {Name = WaypointName, Pos = LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position})
        WaypointName = ""
        UpdateDropdowns()

        WindUI:Notify({
            Title = "Save successful",
            Content = "New waypoints added",
            Icon = "check-circle",
            Duration = 3,
        })
    end
})

Tab:Button({
    Title = "üíæ Save Waypoints to a file",
    Desc = "Click to save all to a JSON file and if you have deleted Waypoints, click to save again. (Must do)",
    Callback = function()
        if #Waypoints == 0 then
            WindUI:Notify({
                Title = "‚ö†Ô∏è No Information",
                Content = "There are no waypoints to save.",
                Icon = "alert-circle",
                Duration = 3,
            })
            return
        end

        if not isfolder("Waypoints") then
            makefolder("Waypoints")
        end

        local placeFolder = "Waypoints/" .. tostring(game.PlaceId)
        if not isfolder(placeFolder) then
            makefolder(placeFolder)
        end

        local filePath = placeFolder .. "/data.json"

        local data = {}
        for _, wp in pairs(Waypoints) do
            table.insert(data, {
                Name = wp.Name,
                Pos = {x = wp.Pos.X, y = wp.Pos.Y, z = wp.Pos.Z}
            })
        end

        local success, result = pcall(function()
            writefile(filePath, game:GetService("HttpService"):JSONEncode(data))
        end)

        if success then
            WindUI:Notify({
                Title = "‚úÖ Save successful",
                Content = "Waypoints Save at:\n" .. filePath,
                Icon = "save",
                Duration = 4,
            })
        else
            WindUI:Notify({
                Title = "‚ùå Save failed",
                Content = "Error: " .. tostring(result),
                Icon = "x",
                Duration = 4,
            })
        end
    end
})

local Section = Tab:Section({ 
    Title = "Waypoints",
    TextXAlignment = "Left",
    TextSize = 17, -- Default Size
})

DropdownTeleport = Tab:Dropdown({
    Title = "üöÄ Select the location to teleport",
    Values = {},
    Value = nil,
    Callback = function(option)
        SelectedWaypointTeleport = option
    end
})

Tab:Button({
    Title = "üì¶ Teleport to Waypoint",
    Desc = "Teleport to the selected Waypoints",
    Callback = function()
        local character = LocalPlayer.Character
        if not character then
            WindUI:Notify({
                Title = "error",
                Content = "No characters yet",
                Icon = "alert-triangle",
                Duration = 4,
            })
            return
        end

        local HRP = character:FindFirstChild("HumanoidRootPart")
        if not HRP then
            WindUI:Notify({
                Title = "error",
                Content = "HumanoidRootPart not found",
                Icon = "alert-triangle",
                Duration = 4,
            })
            return
        end

        for _, wp in pairs(Waypoints) do
            if wp.Name == SelectedWaypointTeleport then
                HRP.CFrame = CFrame.new(wp.Pos)
                WindUI:Notify({
                    Title = "Teleport successful",
                    Content = "You have been Teleport to: " .. wp.Name,
                    Icon = "map-pin",
                    Duration = 4,
                })
                return
            end
        end

        WindUI:Notify({
            Title = "Waypoints not yet selected",
            Content = "Please select a waypoint before teleport.",
            Icon = "target",
            Duration = 4,
        })
    end
})

local Section = Tab:Section({ 
    Title = "Remove Waypoints",
    TextXAlignment = "Left",
    TextSize = 17, -- Default Size
})

DropdownDelete = Tab:Dropdown({
    Title = "üóëÔ∏è Select the waypoints to delete.",
    Values = {},
    Value = nil,
    Callback = function(option)
        SelectedWaypointDelete = option
    end
})

Tab:Button({
    Title = "‚ùå Delete the selected waypoints",
    Desc = "Delete the selected Waypoints from the delete list. Please go back and save it.",
    Callback = function()
        for i, wp in pairs(Waypoints) do
            if wp.Name == SelectedWaypointDelete then
                table.remove(Waypoints, i)
                SelectedWaypointDelete = nil
                SelectedWaypointTeleport = nil
                UpdateDropdowns()

                WindUI:Notify({
                    Title = "Delete successfully",
                    Content = "Waypoints has been successfully deleted.",
                    Icon = "trash",
                    Duration = 3,
                })
                return
            end
        end

        WindUI:Notify({
            Title = "Waypoints not yet selected",
            Content = "Please select the waypoints to delete.",
            Icon = "target",
            Duration = 4,
        })
    end
})

do
    local placeFolder = "Waypoints/" .. tostring(game.PlaceId)
    local filePath = placeFolder .. "/data.json"

    if isfile(filePath) then
        local content = readfile(filePath)
        local success, data = pcall(function()
            return game:GetService("HttpService"):JSONDecode(content)
        end)

        if success and typeof(data) == "table" then
            table.clear(Waypoints)

            for _, wp in pairs(data) do
                if wp.Name and wp.Pos then
                    table.insert(Waypoints, {
                        Name = wp.Name,
                        Pos = Vector3.new(wp.Pos.x, wp.Pos.y, wp.Pos.z)
                    })
                end
            end

            UpdateDropdowns()

            WindUI:Notify({
                Title = "üì• Waypoints loaded successfully",
                Content = ": " .. tostring(#Waypoints),
                Icon = "download",
                Duration = 3
            })
        else
            WindUI:Notify({
                Title = "‚ùå Load failed",
                Content = "Failed to read JSON",
                Icon = "x",
                Duration = 4
            })
        end
    else
        WindUI:Notify({
            Title = "Please save Waypoints",
            Content = "No Waypoints has been saved on this map yet.",
            Icon = "folder",
            Duration = 3
        })
    end
end

local Section = Tab:Section({ 
    Title = "Walk Speed",
    TextXAlignment = "Left",
    TextSize = 17, -- Default Size
})

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local WalkSpeedEnabled = false
local WalkSpeedValue = 16
local DefaultWalkSpeed = 16

-- ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ WalkSpeed ‡∏î‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏¥‡∏°‡∏ï‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
LocalPlayer.CharacterAdded:Connect(function(char)
    local humanoid = char:WaitForChild("Humanoid")
    DefaultWalkSpeed = humanoid.WalkSpeed
    if WalkSpeedEnabled then
        humanoid.WalkSpeed = WalkSpeedValue
    end
end)

Tab:Input({
    Title = "Enter WalkSpeed",
    Placeholder = "‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß ‡πÄ‡∏ä‡πà‡∏ô 30",
    Callback = function(text)
        local num = tonumber(text)
        if num and num > 0 then
            WalkSpeedValue = num

            -- ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô WalkSpeed ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            if WalkSpeedEnabled then
                local character = LocalPlayer.Character
                if character then
                    local humanoid = character:FindFirstChildOfClass("Humanoid")
                    if humanoid then
                        humanoid.WalkSpeed = WalkSpeedValue
                    end
                end
            end
        end
    end
})

Tab:Toggle({
    Title = "Open/Close WalkSpeed",
    Desc = "Set WalkSpeed",
    Icon = "activity",
    Type = "Checkbox",
    Default = false,
    Callback = function(state)
        WalkSpeedEnabled = state
        local character = LocalPlayer.Character
        if character then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = WalkSpeedEnabled and WalkSpeedValue or DefaultWalkSpeed
            end
        end
    end
})

local Tab2 = Window:Tab({
    Title = "Server",
    Icon = "bird",
    Locked = false,
})
local Section = Tab2:Section({ 
    Title = "JobId",
    TextXAlignment = "Left",
    TextSize = 17, -- Default Size
})

Tab2:Button({
    Title = "üìã Copy JobId",
    Desc = "It will Copy JobId this Server to Clipboard",
    Callback = function()
        setclipboard(game.JobId)

        WindUI:Notify({
            Title = "üìã succeed!",
            Content = "JobId copied",
            Icon = "clipboard-copy",
            Duration = 3,
        })
    end
})

Tab2:Input({
    Title = "Put JobId",
    Placeholder = "Place JobId here...",
    Callback = function(text)
        JobIdInput = text
    end
})

Tab2:Button({
    Title = "üöÄ teleport to JobId",
    Desc = "Teleport to the server.",
    Callback = function()
        if JobIdInput == "" then
            WindUI:Notify({
                Title = "‚ùå Failed",
                Content = "Please enter your JobId first.",
                Icon = "alert-circle",
                Duration = 3,
            })
            return
        end

        game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, JobIdInput, game:GetService("Players").LocalPlayer)
    end
})

local Section = Tab2:Section({ 
    Title = "Server",
    TextXAlignment = "Left",
    TextSize = 17, -- Default Size
})

Tab2:Button({
    Title = "Serverhop",
    Desc = "It will go to the others Servers",
    Callback = function()
        local Players = game:GetService("Players")
        local TeleportService = game:GetService("TeleportService")
        local HttpService = game:GetService("HttpService")

        local player = Players.LocalPlayer
        local placeId = game.PlaceId
        local currentJobId = game.JobId
        local visitedServers = {}

        local function getServers(cursor)
            local url = "https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?sortOrder=Desc&limit=100"
            if cursor then
                url = url .. "&cursor=" .. cursor
            end
            local success, result = pcall(function()
                return HttpService:JSONDecode(game:HttpGet(url))
            end)
            return success and result or nil
        end

        local function collectServers(pages)
            local allServers = {}
            local cursor = nil
            for i = 1, pages do
                local data = getServers(cursor)
                if not data then break end
                for _, server in pairs(data.data) do
                    if server.id ~= currentJobId and server.playing < server.maxPlayers then
                        if not visitedServers[server.id] then
                            table.insert(allServers, server)
                        end
                    end
                end
                cursor = data.nextPageCursor
                if not cursor then break end
                task.wait(0.1)
            end
            return allServers
        end

        print("üì° ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Server ‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô‡πÅ‡∏°‡∏û‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà...")

        local servers = collectServers(500)
        if #servers > 0 then
            local selected = servers[math.random(1, #servers)]
            visitedServers[selected.id] = true
            print("‚úÖ ‡∏ß‡∏≤‡∏£‡πå‡∏õ‡πÑ‡∏õ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü ID: " .. selected.id)
            TeleportService:TeleportToPlaceInstance(placeId, selected.id, player)
        else
            warn("‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ Server ‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏•‡∏¢ üòì")
            WindUI:Notify({
                Title = "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡∏ß‡πà‡∏≤‡∏á",
                Content = "‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏ô‡∏∞",
                Icon = "wifi-off",
                Duration = 4,
            })
        end
    end
})

Tab2:Button({
    Title = "Join Low Players",
    Desc = "It will go to lower Player in server",
    Callback = function()
        local Players = game:GetService("Players")
        local TeleportService = game:GetService("TeleportService")
        local HttpService = game:GetService("HttpService")

        local player = Players.LocalPlayer
        local placeId = game.PlaceId
        local currentJobId = game.JobId

        local function getServers(cursor)
            local url = "https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?sortOrder=Asc&limit=100"
            if cursor then
                url = url .. "&cursor=" .. cursor
            end
            local success, result = pcall(function()
                return HttpService:JSONDecode(game:HttpGet(url))
            end)
            return success and result or nil
        end

        local function findLowestPopulationServer(maxPages)
            local cursor = nil
            local lowestServer = nil

            for i = 1, maxPages do
                local result = getServers(cursor)
                if not result then break end

                for _, server in pairs(result.data) do
                    if server.id ~= currentJobId and server.playing < server.maxPlayers then
                        if not lowestServer or server.playing < lowestServer.playing then
                            lowestServer = server
                        end
                    end
                end

                cursor = result.nextPageCursor
                if not cursor then break end
                task.wait(0.1)
            end

            return lowestServer
        end

        print("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Server ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î...")

        local bestServer = findLowestPopulationServer(5)

        if bestServer then
            print("‚úÖ ‡πÄ‡∏à‡∏≠‡πÅ‡∏•‡πâ‡∏ß! ‡∏Ñ‡∏ô‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÅ‡∏Ñ‡πà: " .. bestServer.playing)
            TeleportService:TeleportToPlaceInstance(placeId, bestServer.id, player)
        else
            warn("‚ùå No servers found that are not full yet.")
            WindUI:Notify({
                Title = "‚ùå Serve not found",
                Content = "Failed to find server",
                Icon = "user-x",
                Duration = 4,
            })
        end
    end
})

Tab2:Button({
    Title = "Rejoin",
    Desc = "It will Rejoin to your server",
    Callback = function()
        local TeleportService = game:GetService("TeleportService")
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer

        TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, player)
    end
})

local Tab3 = Window:Tab({
    Title = "Chat",
    Icon = "Chat",
    Locked = false,
})
local Section = Tab3:Section({ 
    Title = "Auto Chat With Players",
    TextXAlignment = "Left",
    TextSize = 17, -- Default Size
})

local targetPlayerName = ""
local chatEnabled = false -- ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î ‡∏ï‡∏≤‡∏° toggle ‡∏õ‡∏Å‡∏ï‡∏¥
local hotkeyControlEnabled = false -- ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏õ‡∏∏‡πà‡∏° F
local hotkeyActive = false -- ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô hotkey mode

local connectedPlayers = {}

local statusLabel -- ‡∏ï‡∏±‡∏ß‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤‡∏ö‡∏ô (‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î hotkeyControlEnabled)

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
local function sendMessage(msg)
    if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
        local channels = TextChatService:FindFirstChild("TextChannels")
        if channels then
            local channel = channels:FindFirstChild("RBXGeneral")
            if channel then
                channel:SendAsync(msg)
            else
                warn("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á RBXGeneral ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡∏°‡πà")
            end
        else
            warn("‡πÑ‡∏°‡πà‡∏û‡∏ö TextChannels ‡πÉ‡∏ô TextChatService")
        end
    else
        local chatEvent = ReplicatedStorage:FindFirstChild("DefaultChatSystemChatEvents")
        if chatEvent and chatEvent:FindFirstChild("SayMessageRequest") then
            chatEvent.SayMessageRequest:FireServer(msg, "All")
        else
            warn("‡πÑ‡∏°‡πà‡∏û‡∏ö SayMessageRequest ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ä‡∏ó‡πÄ‡∏Å‡πà‡∏≤")
        end
    end
end

local function onPlayerChatted(player, msg)
    local enabledNow = chatEnabled
    if hotkeyControlEnabled then
        enabledNow = hotkeyActive
    end

    if enabledNow and player.Name == targetPlayerName then
        sendMessage(msg)
    end
end

local function connectPlayer(player)
    if connectedPlayers[player.UserId] then return end
    connectedPlayers[player.UserId] = true
    player.Chatted:Connect(function(msg)
        onPlayerChatted(player, msg)
    end)
end

for _, player in pairs(Players:GetPlayers()) do
    connectPlayer(player)
end

Players.PlayerAdded:Connect(function(player)
    connectPlayer(player)
end)

-- ‡∏™‡∏£‡πâ‡∏≤‡∏á label ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏Ç‡∏ß‡∏≤‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
local function createStatusLabel()
    if statusLabel then statusLabel:Destroy() end
    statusLabel = Instance.new("TextLabel")
    statusLabel.Name = "ChatFollowStatusLabel"
    statusLabel.AnchorPoint = Vector2.new(1, 0)
    statusLabel.Position = UDim2.new(1, -10, 0, 10)
    statusLabel.Size = UDim2.new(0, 150, 0, 30)
    statusLabel.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    statusLabel.BackgroundTransparency = 0.3
    statusLabel.TextColor3 = Color3.new(1,1,1)
    statusLabel.TextStrokeColor3 = Color3.new(0,0,0)
    statusLabel.TextStrokeTransparency = 0.7
    statusLabel.Font = Enum.Font.SourceSansBold
    statusLabel.TextSize = 18
    statusLabel.Parent = Players.LocalPlayer:WaitForChild("PlayerGui")
    statusLabel.Text = "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏õ‡∏¥‡∏î"
end

local function updateStatusLabel()
    if not statusLabel then return end
    local statusText = hotkeyActive and "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡πÄ‡∏õ‡∏¥‡∏î" or "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏õ‡∏¥‡∏î"
    statusLabel.Text = statusText
end

-- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏° (‡∏ã‡πà‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô)
createStatusLabel()

-- GUI: ‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
Tab3:Input({
    Title = "Target Player Name",
    Placeholder = "‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£",
    Callback = function(text)
        targetPlayerName = text
    end,
})

-- GUI: Toggle ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏≤‡∏°‡∏û‡∏¥‡∏°‡∏û‡πå ‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥
Tab3:Toggle({
    Title = "Enable Chat Follow (Toggle)",
    Default = false,
    Callback = function(state)
        chatEnabled = state
        -- ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î toggle ‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î hotkey mode ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ô
        if state and hotkeyControlEnabled then
            hotkeyControlEnabled = false
            hotkeyActive = false
            updateStatusLabel()
        end
    end,
})

-- GUI: Toggle ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏≤‡∏°‡∏û‡∏¥‡∏°‡∏û‡πå‡πÅ‡∏ö‡∏ö‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° F
Tab3:Toggle({
    Title = "Enable Chat Follow (Hotkey F)",
    Default = false,
    Callback = function(state)
        hotkeyControlEnabled = state
        if state then
            hotkeyActive = false -- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏¥‡∏î‡∏Å‡πà‡∏≠‡∏ô
            updateStatusLabel()
        else
            hotkeyActive = false
            updateStatusLabel()
        end
    end,
})

-- ‡∏ü‡∏±‡∏á event ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° F ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏•‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ hotkeyActive
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if hotkeyControlEnabled and input.KeyCode == Enum.KeyCode.F then
        hotkeyActive = not hotkeyActive
        updateStatusLabel()
    end
end)
